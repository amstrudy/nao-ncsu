<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="141.421">
                        <Box name="Python Script" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="418" y="119">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import sys
import os
import cv2
import numpy as np
import sys
from Queue import PriorityQueue

from ast import literal_eval as make_tuple

class Node:

    def __init__ (self, home=(0,0), goal=(1,1), location=(0,0), gScore = 0):
        self.location = location
        self.home = home
        self.goal = goal
        self.neighbors = []
        self.gScore = gScore
        self.hScore = self.hScore()
        self.fScore = self.gScore + self.hScore

    def hScore (self):
        manhattan_dist = abs((self.goal[0] - self.location[0])) + abs(self.goal[1] - self.location[1])
        return manhattan_dist

    def generateNeighbors (self, map_img):
        neighbors = []
        if self.location[0] + 1 < len(map_img[0]) and map_img[self.location[0] + 1][self.location[1]] != 1:
            neighbors.append(Node(self.home, self.goal, (self.location[0] + 1, self.location[1]), self.gScore + 1))
        if self.location[0] - 1 >= 0 and map_img[self.location[0] - 1][self.location[1]] != 1:
            neighbors.append(Node(self.home, self.goal, (self.location[0] - 1, self.location[1]), self.gScore + 1))
        if self.location[1] + 1 < len(map_img) and map_img[self.location[0]][self.location[1] + 1] != 1:
            neighbors.append(Node(self.home, self.goal, (self.location[0], self.location[1] + 1), self.gScore + 1))
        if self.location[1] - 1 >= 0 and map_img[self.location[0]][self.location[1] - 1] != 1:
            neighbors.append(Node(self.home, self.goal, (self.location[0], self.location[1] - 1), self.gScore + 1))
        self.neighbors = neighbors

    def __str__ (self):
        return "\n----------\n" + "Location: " + str(self.location) + "\nHome: " + str(self.home) + "\nGoal: " + str(self.goal) + "\nNumber of Neighbors: " + str(len(self.neighbors)) + "\nG Score: " + str(self.gScore) + "\nH Score: " + str(self.hScore) + "\nF Score: " + str(self.fScore) + "\n----------\n"

def isNotIn (neighbor, listy):
    for i in listy:
        if neighbor is i:
            return False
    return True

def printMap ((index1, index2)):
    map_img_cp[index1, index2] = 9
    print(map_img_cp)

def reconstruct(cameFrom, current):
    total_path = [current]
    while current in cameFrom:
        current = cameFrom[current]
        total_path.append(current)
    return total_path

def a_star(home, goal, map_img):

    # create node object for home
    home_node = Node(home, goal, home)

    # set of nodes already evaluated
    closedSet = set()

    # set of currently discovered nodes that are not evaluated yet
    # initially, only the start node is known
    openSet = set([home_node])
    cameFrom = {}
    count = 0;

    while len(openSet) != 0:
        tempfScore = next(iter(openSet)).fScore
        current = next(iter(openSet))
        for i in iter(openSet):
            if i.fScore < tempfScore:
                tempfScore = i.fScore
                current = i

        if current.location == home_node.goal:
            #print("Made it to goal")
            return reconstruct(cameFrom, current.location)
        openSet.remove(current)
        closedSet.add(current)

        current.generateNeighbors(map_img)
        for neighbor in current.neighbors:

            if count > (len(map_img) * len(map_img[0])):
                return 0

            if neighbor in closedSet:
                continue

            if neighbor not in openSet:
                openSet.add(neighbor)

            if current.gScore+ abs(current.fScore - neighbor.fScore) >= neighbor.gScore:
                continue # this is not eh better path
            # this path is the best for now, so record it
            cameFrom[neighbor.location] = current.location
        #print(current)
        count += 1 # Total number of nodes checked
        #printMap(current.location)



class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts= ALProxy("ALTextToSpeech")
        self.motionProxy = ALProxy("ALMotion")
        self.map_img = [[0, 0, 1, 0, 0],[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

        pass

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.tts.post.say("Hello, World!")
        #initRobotPosition = almath.Pose2D(motionProxy.getRobotPosition(False))

        path = a_star((0, 0), (4, 4), self.map_img)

        path.reverse()

        print path

        for i in range(len(path) - 1):
            #print path[i+1]
            #print path [i]
            X = 0.1 * (path[i+1][0] - path[i][0])
            Y = 0.1 * (path[i+1][1] - path[i][1])
            print(path[i][0] - path[i+1][0], path[i][1] - path[i+1][1])
            Theta = 0
            self.motionProxy.post.moveTo(X, Y, Theta)

            # wait is useful because with post moveTo is not blocking function
            self.motionProxy.waitUntilMoveIsFinished()
            i += 1

        print "FINISHED!"

        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Stand Up" id="2" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="244" y="99">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Sit Down" id="3" localization="8" tooltip="the robot tries to sit down from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="555" y="125">
                            <bitmap>media/images/box/movement/sit_ground.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in sitting down." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to sit down after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="SitDownBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="371" y="101">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Sit" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
